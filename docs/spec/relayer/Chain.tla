---------------------------- MODULE Chain ----------------------------

EXTENDS Integers, FiniteSets, RelayerDefinitions, 
        ClientHandlers, ConnectionHandlers, ChannelHandlers
        
CONSTANTS MaxHeight, \* maximal chain height
          ChainID, \* chain identifier
          ChannelOrdering, \* indicate whether the channels are ordered or unordered  
          MaxPacketSeq \* maximal packet sequence number

VARIABLES chainStore, \* chain store, containing client heights, a connection end, a channel end 
          incomingDatagrams, \* set of incoming datagrams
          history \* history variable

vars == <<chainStore, incomingDatagrams, history>>
Heights == 1..MaxHeight \* set of possible heights of the chains in the system          

(***************************************************************************
 Client update operators
 ***************************************************************************)
\* Update the clients on chain with chainID, 
\* using the client datagrams generated by the relayer      
\* (Handler operators defined in ClientHandlers.tla)
LightClientUpdate(chainID, store, datagrams) == 
    \* create clients
    LET clientCreatedStore == HandleCreateClient(chainID, store, datagrams) IN
    \* update clients
    LET clientUpdatedStore == HandleClientUpdate(chainID, clientCreatedStore, datagrams) IN

    clientUpdatedStore

(***************************************************************************
 Connection update operators
 ***************************************************************************)
\* Update the connections on chain with chainID, 
\* using the connection datagrams generated by the relayer
\* (Handler operators defined in ConnectionHandlers.tla)
ConnectionUpdate(chainID, store, datagrams) ==
    \* update the chain store with "ConnOpenInit" datagrams
    LET connOpenInitStore == HandleConnOpenInit(chainID, store, datagrams) IN
    
    \* update the chain store with "ConnOpenTry" datagrams
    LET connOpenTryStore == HandleConnOpenTry(chainID, connOpenInitStore, datagrams) IN
    
    \* update the chain store with "ConnOpenAck" datagrams
    LET connOpenAckStore == HandleConnOpenAck(chainID, connOpenTryStore, datagrams) IN
    
    \* update the chain store with "ConnOpenConfirm" datagrams
    LET connOpenConfirmStore == HandleConnOpenConfirm(chainID, connOpenAckStore, datagrams) IN
    
    \* output the updated chain store 
    connOpenConfirmStore
    
(***************************************************************************
 Channel update operators
 ***************************************************************************)
\* Update the channel on chain with chainID, 
\* using the channel datagrams generated by the relayer
\* (Handler operators defined in ChannelHandlers.tla)
ChannelUpdate(chainID, store, datagrams) ==
    \* update the chain store with "ChanOpenInit" datagrams
    LET chanOpenInitStore == HandleChanOpenInit(chainID, store, datagrams) IN

    \* update the chain store with "ChanOpenTry" datagrams
    LET chanOpenTryStore == HandleChanOpenTry(chainID, chanOpenInitStore, datagrams) IN

    \* update the chain store with "ChanOpenAck" datagrams
    LET chanOpenAckStore == HandleChanOpenAck(chainID, chanOpenTryStore, datagrams) IN

    \* update the chain store with "ChanOpenConfirm" datagrams
    LET chanOpenConfirmStore == HandleChanOpenConfirm(chainID, chanOpenAckStore, datagrams) IN

    \* update the chain store with "ChanCloseInit" datagrams
    LET chanCloseInitStore == HandleChanCloseInit(chainID, chanOpenConfirmStore, datagrams) IN

    \* update the chain store with "ChanCloseConfirm" datagrams
    LET chanCloseConfirmStore == HandleChanCloseConfirm(chainID, chanCloseInitStore, datagrams) IN

    chanCloseConfirmStore

(***************************************************************************
 Chain update operators
 ***************************************************************************)
\* Update chainID with the received datagrams
\* Supports ICS2 (Clients), ICS3 (Connections), and ICS4 (Channels).
UpdateChainStore(chainID, datagrams) == 
    
    \* ICS 002: Client updates
    LET clientUpdatedStore == LightClientUpdate(chainID, chainStore, datagrams) IN

    \* ICS 003: Connection updates
    LET connectionUpdatedStore == ConnectionUpdate(chainID, clientUpdatedStore, datagrams) IN

    \* ICS 003: Channel updates
    LET channelUpdatedStore == ChannelUpdate(chainID, connectionUpdatedStore, datagrams) IN


    \* update height
    LET updatedChainStore == 
        IF /\ chainStore /= channelUpdatedStore
           /\ chainStore.height + 1 \in Heights 
        THEN [channelUpdatedStore EXCEPT !.height = chainStore.height + 1]
        ELSE channelUpdatedStore
    IN
    updatedChainStore

(***************************************************************************
 Chain actions
 ***************************************************************************)       
\* Advance the height of the chain until MaxHeight is reached
AdvanceChain ==
    /\ chainStore.height + 1 \in Heights
    /\ chainStore' = [chainStore EXCEPT !.height = chainStore.height + 1]
    /\ UNCHANGED <<incomingDatagrams, history>>

\* Handle the datagrams and update the chain state        
HandleIncomingDatagrams ==
    /\ incomingDatagrams /= AsSetDatagrams({}) 
    /\ chainStore' = UpdateChainStore(ChainID, AsSetDatagrams(incomingDatagrams))
    /\ incomingDatagrams' = AsSetDatagrams({})
    /\ history' = CASE chainStore'.connectionEnd.state = "INIT" 
                                -> [history EXCEPT !.connInit = TRUE]
                        [] chainStore'.connectionEnd.state = "TRYOPEN"
                                -> [history EXCEPT !.connTryOpen = TRUE] 
                        [] chainStore'.connectionEnd.state = "OPEN"
                                -> [history EXCEPT !.connOpen = TRUE] 
                        [] chainStore'.connectionEnd.channelEnd.state = "INIT"
                                -> [history EXCEPT !.chanInit = TRUE]
                        [] chainStore'.connectionEnd.channelEnd.state = "TRYOPEN"
                                -> [history EXCEPT !.chanTryOpen = TRUE]
                        [] chainStore'.connectionEnd.channelEnd.state = "OPEN"
                                -> [history EXCEPT !.chanOpen = TRUE]
                        [] chainStore'.connectionEnd.channelEnd.state = "CLOSED"
                                -> [history EXCEPT !.chanClosed = TRUE] 
                        [] OTHER 
                                -> history

(***************************************************************************
 Specification
 ***************************************************************************)
\* Initial state predicate
\* Initially
\*  - each chain is initialized to InitChain (defined in RelayerDefinitions.tla)
\*  - pendingDatagrams for each chain is empty
\*  - the packetSeq is set to 1
Init == 
    /\ chainStore = InitChainStore(ChannelOrdering)
    /\ incomingDatagrams = AsSetDatagrams({})
    /\ history = InitHistory

\* Next state action
\* The chain either
\*  - advances its height
\*  - receives datagrams and updates its state
\*  - sends a packet (TODO)
Next ==
    \/ AdvanceChain 
    \/ HandleIncomingDatagrams
    \/ UNCHANGED vars
        
Fairness ==
    /\ WF_vars(AdvanceChain)
    /\ WF_vars(HandleIncomingDatagrams)        
        
(***************************************************************************
 Invariants
 ***************************************************************************)
\* Type invariant   
\* ChainStores and Datagrams are defined in RelayerDefinitions.tla        
TypeOK ==    
    /\ chainStore \in ChainStores(MaxHeight, ChannelOrdering, MaxPacketSeq)
    /\ incomingDatagrams \in SUBSET Datagrams(MaxHeight, MaxPacketSeq)
    /\ history \in Histories
    
(***************************************************************************
 Properties
 ***************************************************************************)    
\* it ALWAYS holds that the height of the chain does not EVENTUALLY decrease
HeightDoesntDecrease ==
    [](\A h \in Heights : chainStore.height = h 
        => <>(chainStore.height >= h))

=============================================================================
\* Modification History
\* Last modified Thu Sep 10 15:43:42 CEST 2020 by ilinastoilkovska
\* Created Fri Jun 05 16:56:21 CET 2020 by ilinastoilkovska
