#!/usr/bin/env sh

set -eu

# Load lib-gm either from the local folder or from the global $HOME/.gm/bin/lib-gm
SCRIPT_0="${0:-$HOME/.gm/bin/gm}"
export SCRIPT_DIR="${SCRIPT_0%%gm}"
export LOCAL_LIB_GM="${SCRIPT_DIR}lib-gm"
if [ -f "$LOCAL_LIB_GM" ]; then
  # shellcheck source=lib-gm
  . "$LOCAL_LIB_GM"
elif [ -f "$HOME/.gm/bin/lib-gm" ]; then
  . "$HOME/.gm/bin/lib-gm"
elif [ -f "${LIB_GM:-}" ]; then
  # shellcheck source=lib-gm
  . "$LIB_GM"
else
  echo "ERROR: could not find lib-gm, exiting..."
  exit 1
fi

enforce_requirements

usage() {
  cat <<EOF
Gaiad Manager $(version)

Usage:
  gm <COMMAND> [[<PARAMS>]...]

COMMANDS    DESCRIPTION

help        print this help and exit
hermes      sub-command for hermes-related configuration
install     install the script for the local user
keys        print the keys of validator nodes
log         print the log of a node
ports       print the ports of a (running) node
start       start one or more nodes (starts all nodes if no parameter is given)
status      print the status of nodes
stop        stop one or more nodes (stops all nodes if no parameter is given)
reset       reset one or more nodes' database (resets all nodes if no parameter is given)
rm          delete the configuration of a node
version     print the application version

EOF
}

hermes_usage() {
  cat <<EOF
Gaiad Manager $(version) - hermes subcommand

Usage:
  gm hermes <SUBCOMMAND> [[<PARAMS>]...]

SUBCOMMANDS  DESCRIPTION

cc           print a list of hermes commands to create IBC connections
config       update hermes config.toml with the current gm network details
help         print this help and exit
keys         add keys to $HOME/.hermes

EOF
}

case "${1:-help}" in
  help)
    disable_when_json
    usage
    ;;
  hermes)
    disable_when_json
    shift
    case "${1:-help}" in
      help)
        hermes_usage
        ;;
      config)
        parse_config_file
        hermes_config
        ;;
      keys)
        parse_config_file
        if [ $# -eq 1 ]; then
          NODES="$ALL_HERMES_NODES"
        else
          shift
          NODES="$*"
        fi
        for i in $NODES
        do
          warn_unknown_hermes_node "$i" || continue
          hermes_keys "$i"
        done
        ;;
      cc)
        parse_config_file
        hermes_cc
        ;;
      *)
        hermes_usage
        exit_with_error "could not understand the command hermes '$1'"
        ;;
    esac
    ;;
  install)
    disable_when_json
    install
    ;;
  keys)
    disable_when_json # Todo: implement it for JSON
    parse_config_file
    if [ $# -eq 1 ]; then
      NODES="$ALL_NODES"
    else
      shift
      NODES="$*"
    fi
    for i in $NODES
    do
      warn_unknown_node "$i" || continue
      list_keys "$i"
    done
    ;;
  log)
    disable_when_json
    parse_config_file
    shift
    F_FLAG=""
    R_FLAG=""
    LIST=""
    while [ "$#" -gt 0 ];
    do
      case "$1" in
        "-f")
          F_FLAG="-f" ;;
        "-r")
          R_FLAG="-r" ;;
        *)
          LIST="$LIST $(get_home_dir "$1")/log"
      esac
      shift
    done
    if [ -z "$LIST" ]; then
      exit_with_error "no node name was given"
    fi
    if [ -n "$F_FLAG" ] && [ -n "$R_FLAG" ]; then
      exit_with_error "-f and -r is too much even for the tail command"
    fi
    if [ -z "$F_FLAG" ] && [ -z "$R_FLAG" ]; then
      echo "less -R +G $LIST"
      # Todo: spaces in folder names and file names are not supported yet.
      # shellcheck disable=SC2086
      less -R +G $LIST
    else
      if [ -n "$F_FLAG" ]; then
        echo "tail -f $LIST"
        # Todo: spaces in folder names and file names are not supported yet.
        # shellcheck disable=SC2086
        tail -f $LIST
      elif [ -n "$R_FLAG" ]; then
        echo "tail -r $LIST"
        # Todo: spaces in folder names and file names are not supported yet.
        # shellcheck disable=SC2086
        tail -r $LIST
      fi
    fi
    ;;
  ports)
    disable_when_json
    parse_config_file
    if [ $# -eq 1 ]; then
      NODES="$ALL_NODES"
    else
      shift
      NODES="$*"
    fi
    for i in $NODES
    do
      warn_unknown_node "$i" || continue
      ports "$i"
    done
    ;;
  ss)
    disable_when_json
    # For debug purposes
    if [ -n "$(which lsof)" ]; then
      lsof -i:27000-28000 -P
    elif [ -n "$(which ss)" ]; then
      ss -tulpn sport '>=' :27000 '&&' sport '<=' :28000
    else
      echo "ERROR: no app found to list open ports"
    fi
    ;;
  start)
    parse_config_file
    if [ $# -eq 1 ]; then
      NODES_TO_START="$ALL_NODES"
    else
      shift
      NODES_TO_START="$*"
    fi
    for i in $NODES_TO_START
    do
      warn_unknown_node "$i" || continue
      if [ ! -d "$(get_home_dir "$i")" ]; then
        create "$i" || continue
      fi
      if get_auto_maintain_config "$i"; then
        configure "$i"
      fi
      start "$i"
    done
    ;;
  status)
    parse_config_file
    status
    ;;
  stop)
    parse_config_file
    if [ $# -eq 1 ]; then
      NODES_TO_STOP="$ALL_NODES"
    else
      shift
      NODES_TO_STOP="$*"
    fi
    for i in $NODES_TO_STOP
    do
      warn_unknown_node "$i" || continue
      stop "$i"
    done
    ;;
  reset)
    parse_config_file
    if [ $# -eq 1 ]; then
      NODES_TO_STOP="$ALL_NODES"
    else
      shift
      NODES_TO_STOP="$*"
    fi
    for i in $NODES_TO_STOP
    do
      warn_unknown_node "$i" || continue
      reset "$i"
    done
    ;;
  rm)
    parse_config_file
    shift
    if [ "$#" -eq 0 ]; then
      exit_with_error "no node was given"
    fi
    while [ "$#" -gt 0 ];
    do
      if is_running "$1"; then
        stop "$1"
        sleep 1
      fi
      safer_rm "$1"
      shift
    done
    ;;
  version)
    version
    exit 0
    ;;
  *)
    disable_when_json
    usage
    exit_with_error "could not understand the command '$1'"
    ;;
esac
