#!/usr/bin/env sh

set -eu

# Load lib-gm either from the local folder or from the global $HOME/.gm/bin/lib-gm
SCRIPT_0="${0:-$HOME/.gm/bin/gm}"
export SCRIPT_DIR="${SCRIPT_0%%gm}"
export LOCAL_LIB_GM="${SCRIPT_DIR}lib-gm"
if [ -f "$LOCAL_LIB_GM" ]; then
  . "$LOCAL_LIB_GM"
elif [ -f "$HOME/.gm/bin/lib-gm" ]; then
  . "$HOME/.gm/bin/lib-gm"
else
  echo "ERROR: could not find lib-gm, exiting..."
  exit 1
fi

enforce_requirements

usage() {
  echo "Gaiad Manager $(version)"
  echo
  echo "Usage:"
  echo "  gm <COMMAND> [[<PARAMS>]...]"
  echo
  echo "COMMANDS     DESCRIPTION"
  echo
  echo "help         print this help and exit"
  echo "hermes       sub-command for hermes-related configuration"
  echo "install      install the script for the local user"
  echo "keys         print the keys of validator nodes"
  echo "log          print the log of a node"
  echo "ports        print the ports of a (running) node"
  echo "start        start one or more nodes (starts all nodes if no parameter is given)"
  echo "status       print the status of nodes"
  echo "stop         stop one or more nodes (stops all nodes if no parameter is given)"
  echo "reset        reset one or more nodes' database (resets all nodes if no parameter is given)"
  echo "rm           delete the configuration of a node"
  echo "version      print the application version"
  echo
}

hermes_usage() {
  echo "Gaiad Manager $(version) - hermes subcommand"
  echo
  echo "Usage:"
  echo "  gm hermes <SUBCOMMAND> [[<PARAMS>]...]"
  echo
  echo "SUBCOMMANDS  DESCRIPTION"
  echo
  echo "help         print this help and exit"
  echo "config       update hermes config.toml with the current gm network details"
  echo "keys         add keys to $HOME/.hermes"
  echo "cc           print a list of hermes commands to create IBC connections"
  echo
}

case "${1:-help}" in
  help)
    usage
    ;;
  hermes)
    shift
    case "${1:-help}" in
      help)
        hermes_usage
        ;;
      config)
        load_config
        hermes_config
        ;;
      keys)
        load_config
        if [ $# -eq 1 ]; then
          NODES="$ALL_HERMES_NODES"
        else
          shift
          NODES="$*"
        fi
        for i in $NODES
        do
          warn_unknown_hermes_node "$i" || continue
          hermes_keys "$i"
        done
        ;;
      cc)
        load_config
        hermes_cc
        ;;
      *)
        hermes_usage
        exit_with_error "could not understand the command hermes \"$1\""
        ;;
    esac
    ;;
  install)
    install
    ;;
  keys)
    load_config
    if [ $# -eq 1 ]; then
      NODES="$ALL_NODES"
    else
      shift
      NODES="$*"
    fi
    for i in $NODES
    do
      warn_unknown_node "$i" || continue
      list_keys "$i"
    done
    ;;
  log)
    load_config
    shift
    F_FLAG=""
    R_FLAG=""
    LIST=""
    while [ "$#" -gt 0 ];
    do
      case "$1" in
        "-f")
          F_FLAG="-f" ;;
        "-r")
          R_FLAG="-r" ;;
        *)
          LIST="$LIST $(get_home_dir "$1")/log"
      esac
      shift
    done
    if [ -z "$LIST" ]; then
      exit_with_error "no node name was given"
    fi
    if [ -n "$F_FLAG" ] && [ -n "$R_FLAG" ]; then
      exit_with_error "-f and -r is too much even for the tail command"
    fi
    if [ -z "$F_FLAG" ] && [ -z "$R_FLAG" ]; then
      echo "less -R +G $LIST"
      # Todo: spaces in folder names and file names are not supported yet.
      # shellcheck disable=SC2086
      less -R +G $LIST
    else
      if [ -n "$F_FLAG" ]; then
        echo "tail -f $LIST"
        # Todo: spaces in folder names and file names are not supported yet.
        # shellcheck disable=SC2086
        tail -f $LIST
      elif [ -n "$R_FLAG" ]; then
        echo "tail -r $LIST"
        # Todo: spaces in folder names and file names are not supported yet.
        # shellcheck disable=SC2086
        tail -r $LIST
      fi
    fi
    ;;
  ports)
    load_config
    if [ $# -eq 1 ]; then
      NODES="$ALL_NODES"
    else
      shift
      NODES="$*"
    fi
    for i in $NODES
    do
      warn_unknown_node "$i" || continue
      ports "$i"
    done
    ;;
  ss)
    # For debug purposes
    # Todo: either make this a supported command or remove it
    lsof -i4:27000-28000 -P
    ;;
  start)
    load_config
    if [ $# -eq 1 ]; then
      NODES_TO_START="$ALL_NODES"
    else
      shift
      NODES_TO_START="$*"
    fi
    for i in $NODES_TO_START
    do
      warn_unknown_node "$i" || continue
      if [ ! -d "$(get_home_dir "$i")" ]; then
        create "$i" || continue
      fi
      if get_auto_maintain_config "$i"; then
        configure "$i"
      fi
      start "$i"
    done
    ;;
  status)
    load_config
    status
    ;;
  stop)
    load_config
    if [ $# -eq 1 ]; then
      NODES_TO_STOP="$ALL_NODES"
    else
      shift
      NODES_TO_STOP="$*"
    fi
    for i in $NODES_TO_STOP
    do
      warn_unknown_node "$i" || continue
      stop "$i"
    done
    ;;
  reset)
    load_config
    if [ $# -eq 1 ]; then
      NODES_TO_STOP="$ALL_NODES"
    else
      shift
      NODES_TO_STOP="$*"
    fi
    for i in $NODES_TO_STOP
    do
      warn_unknown_node "$i" || continue
      reset "$i"
    done
    ;;
  rm)
    load_config
    shift
    if [ "$#" -eq 0 ]; then
      exit_with_error "no node was given"
    fi
    while [ "$#" -gt 0 ];
    do
      if is_running "$1"; then
        stop "$1"
        sleep 1
      fi
      safer_rm "$1"
      shift
    done
    ;;
  version)
    version
    exit 0
    ;;
  *)
    usage
    exit_with_error "could not understand the command \"$1\""
    ;;
esac
