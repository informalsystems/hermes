#!/usr/bin/env sh
set -eu
if [ "${DEBUG:-}" == "2" ]; then
  set -x
fi

version() {
  echo "v0.0.1"
}

config_defaults() {
    GLOBAL_GAIAD_BINARY="$(which gaiad || echo "${GOPATH:-./gaiad}")"
    GLOBAL_HERMES_BINARY="$(which hermes || echo "./hermes")"
    #GLOBAL_PORTS_START_AT is deliberately not exported because it is updated sometimes during execution
    GLOBAL_HOME_DIR="${HOME}/.gm"
    GLOBAL_HERMES_CONFIG="${HOME}/.hermes/config.toml"
    GLOBAL_AUTO_MAINTAIN_CONFIG="true"
    GLOBAL_ADD_TO_HERMES="false"
    GLOBAL_WALLET_MNEMONIC=""
    GLOBAL_WALLET_HDPATH=""
    GLOBAL_HERMES_STRATEGY="all"
    GLOBAL_HERMES_LOG_LEVEL="info"
}

install() {
  mkdir -p "${HOME}/.gm/bin"
  cp "$0" "${HOME}/.gm/bin/gm"
  chmod 755 "${HOME}/.gm/bin/gm"
  cp "${0%%gm}lib-gm" "${HOME}/.gm/bin/lib-gm"
  chmod 644 "${HOME}/.gm/bin/lib-gm"
  cp "${0%%gm}shell-support" "${HOME}/.gm/bin/shell-support"
  chmod 644 "${HOME}/.gm/bin/shell-support"
  CONFIG_FILE="${HOME}/.gm/gm.toml"
  if [ -f "$CONFIG_FILE" ]; then
    warn "Config file already exists. Please double-check the documentation to see if all necessary configuration items are set."
  else
    config_defaults
    write_default_config
  fi
  if [ -z "$(which stoml)" ]; then
    warn "missing mandatory stoml, install it from https://github.com/freshautomations/stoml/releases"
  fi
  if [ -z "$(which sconfig)" ]; then
    warn "missing mandatory sconfig, install it from https://github.com/freshautomations/sconfig/releases"
  fi
  if [ ! -d /usr/local/etc/bash_completion.d ]; then
    warn "run \"brew install bash-completion\" to install optional bash completion"
  fi
  echo "Please add \"source $HOME/.gm/bin/shell-support\" to your .profile, .bash_profile or other startup script and restart your shell."
}

enforce_requirements() {
  if [ -z "$(which stoml)" ]; then
    exit_with_error "missing stoml, install it from https://github.com/freshautomations/stoml/releases"
  fi
  if [ -z "$(which sconfig)" ]; then
    exit_with_error "missing sconfig, install it from https://github.com/freshautomations/sconfig/releases"
  fi
  if [ -z "$(which sed)" ]; then
    exit_with_error "missing sed, please install it (this requirement will be removed in the future)"
  fi
  if [ -z "$(which tr)" ]; then
    exit_with_error "missing tr, please install it (this requirement will be removed in the future)"
  fi
}

debug() {
  if [ -n "${DEBUG:-}" ]; then
    echo "DEBUG: $*"
  fi
}

warn() {
  echo "WARNING: $*"
}

warn_unknown_node() {
  if ! a_in_b "$1" "$ALL_NODES"; then
    warn "unknown node $1, skipping..."
    return 1
  fi
}

warn_unknown_hermes_node() {
  if ! a_in_b "$1" "$ALL_HERMES_NODES"; then
    warn "not a hermes node $1, skipping..."
    return 1
  fi
}

exit_with_error() {
  echo "ERROR: $*, exiting..."
  return 1
}

usage() {
  echo "Gaiad Manager $(version)"
  echo 
  echo "Usage:"
  echo "  gm <COMMAND> [[<PARAMS>]...]"
  echo
  echo "COMMANDS    DESCRIPTION"
  echo
  echo "help        print this help and exit"
  echo "install     install the script for the local user"
  echo "keys        print the keys of validator nodes"
  echo "log         print the log of a node"
  echo "ports       print the ports of a (running) node"
  echo "start       start one or more nodes (starts all nodes if no parameter is given)"
  echo "status      print the status of nodes"
  echo "stop        stop one or more nodes (stops all nodes if no parameter is given)"
  echo
}

# Is string A in space-separated list B?
a_in_b() {
  test -n "$(echo "$2" | grep '\(^\| \+\)'"${1}"'\( \+\|$\)')"
}

# Is string A in comma-separated list B?
a_in_b_comma_separated() {
  test -n "$(echo "$2" | grep '\(^\|,\) *'"${1}"' *\(,\|$\)')"
}

# Return the n-th value from a comma-separated list.
# Starts with 1.
n_from_a() {
  i=1
  N=$(($1))
  shift
  LIST="$*"
  for j in $LIST
  do
    if [ $((N-i)) -eq 0 ]; then
      echo "$j"
      return 0
    fi
    i=$((i+1))
  done
  return 1
}

# Todo: do we want to use this?
is_configuration_valid() {
  if ! a_in_b "$1" "$ALL_NODES"; then
    return 1
  fi
  HOME_DIR="$(get_home_dir "$1")"
  for d in "$HOME_DIR" "${HOME_DIR}/config" "${HOME_DIR}/data"
  do
    if [ ! -d "$d" ]; then
      return 1
    fi
  done
  for f in "${HOME_DIR}/config/config.toml" "${HOME_DIR}/config/app.toml" "${HOME_DIR}/config/node_key.json"
  do
    if [ ! -f "$f" ]; then
      return 1
    fi
  done
  return 0
}

# Function to work around https://github.com/spf13/viper/issues/1131
load_all_sections() {
  grep '^ *\[.\+\] *$' "$CONFIG_FILE" | sed 's/^ *\[\([^]]*\)\] *$/\1/'
}

load_config() {
  FRESH_CONFIG=no
  if [ -f "${SCRIPT_DIR}gm.toml" ]; then
    export CONFIG_FILE="${SCRIPT_DIR}gm.toml"
  elif [ -f "${HOME}/.gm/gm.toml" ]; then
    export CONFIG_FILE="${HOME}/.gm/gm.toml"
  else
    FRESH_CONFIG=yes
    if [ -d "${HOME}/.gm" ]; then
      export CONFIG_FILE="${HOME}/.gm/gm.toml"
    else
      export CONFIG_FILE="${SCRIPT_DIR}gm.toml"
    fi
  fi
  config_defaults
  GLOBAL_GAIAD_BINARY="$(eval echo "$(stoml -q "$CONFIG_FILE" global.gaiad_binary || echo "$GLOBAL_GAIAD_BINARY")")"
  GLOBAL_HERMES_BINARY="$(eval echo "$(stoml -q "$CONFIG_FILE" global.hermes_binary || echo "$GLOBAL_HERMES_BINARY")")"
  GLOBAL_HOME_DIR="$(eval echo "$(stoml -q "$CONFIG_FILE" global.home_dir || echo "$GLOBAL_HOME_DIR")")"
  GLOBAL_HERMES_CONFIG="$(eval echo "$(stoml -q "$CONFIG_FILE" global.hermes_config || echo "$GLOBAL_HERMES_CONFIG")")"
  GLOBAL_AUTO_MAINTAIN_CONFIG="$(stoml -q "$CONFIG_FILE" global.auto_maintain_config || echo "$GLOBAL_AUTO_MAINTAIN_CONFIG")"
  GLOBAL_ADD_TO_HERMES="$(stoml -q "$CONFIG_FILE" global.add_to_hermes || echo "$GLOBAL_ADD_TO_HERMES")"
  GLOBAL_WALLET_MNEMONIC="$(stoml -q "$CONFIG_FILE" global.wallet_mnemonic || echo "$GLOBAL_WALLET_MNEMONIC")"
  GLOBAL_WALLET_HDPATH="$(stoml -q "$CONFIG_FILE" global.wallet_hdpath || echo "$GLOBAL_WALLET_HDPATH")"
  GLOBAL_HERMES_STRATEGY="$(stoml -q "$GLOBAL_HERMES_CONFIG" global.strategy || echo "$GLOBAL_HERMES_STRATEGY")"
  GLOBAL_HERMES_LOG_LEVEL="$(stoml -q "$GLOBAL_HERMES_CONFIG" global.log_level || echo "$GLOBAL_HERMES_LOG_LEVEL")"
  export GLOBAL_GAIAD_BINARY
  export GLOBAL_HERMES_BINARY
  export GLOBAL_HOME_DIR
  export GLOBAL_HERMES_CONFIG
  export GLOBAL_AUTO_MAINTAIN_CONFIG
  export GLOBAL_ADD_TO_HERMES
  export GLOBAL_WALLET_MNEMONIC
  export GLOBAL_WALLET_HDPATH
  if [ "$FRESH_CONFIG" = "yes" ]; then
    write_default_config
    VALIDATORS=""
    FULL_NODES=""
    ALL_HERMES_NODES=""
  else
    stoml "$CONFIG_FILE" global 1> /dev/null || exit_with_error invalid config file. Make sure all strings are quoted
    test -x "$GLOBAL_GAIAD_BINARY" || exit_with_error "gaiad binary cannot be executed: $GLOBAL_GAIAD_BINARY"
    # Workaround for issue: https://github.com/spf13/viper/issues/1131
    #   Fix "stoml" so it reads empty sections too.
    #RAW_SECTIONS="$(stoml -q "$CONFIG_FILE" . || echo "")"
    RAW_SECTIONS="$(load_all_sections || echo "")"
    # End of workaround
    VALIDATORS=""
    RAW_NODES=""
    ALL_HERMES_NODES=""
    for i in $RAW_SECTIONS
    do
      if [ "$i" = "global" ]; then
        continue
      fi
      if [ -z "$(stoml "$CONFIG_FILE" "${i}.network")" ]; then
        VALIDATORS="$VALIDATORS $i"
        if get_add_to_hermes "$i"; then
          ALL_HERMES_NODES="$ALL_HERMES_NODES $i"
        fi
      else
        RAW_NODES="$RAW_NODES $i"
      fi
    done
    FULL_NODES=""
    for i in $RAW_NODES
    do
      NODE_NETWORK="$(stoml "$CONFIG_FILE" "${i}.network")"
      if ! a_in_b "${NODE_NETWORK}" "$VALIDATORS"; then
        warn "invalid full node: $i, invalid network entry: ${NODE_NETWORK}, skipping..."
        continue
      fi
      FULL_NODES="${FULL_NODES} $i"
      if get_add_to_hermes "$i"; then
        ALL_HERMES_NODES="$ALL_HERMES_NODES $i"
      fi
    done
  fi
  VALIDATORS="${VALIDATORS## }"
  FULL_NODES="${FULL_NODES## }"
  ALL_HERMES_NODES="${ALL_HERMES_NODES## }"
  export VALIDATORS
  export FULL_NODES
  export ALL_HERMES_NODES
  export ALL_NODES="$VALIDATORS $FULL_NODES"
  # Workaround for issue: https://github.com/spf13/viper/issues/1131
  #   Fix "stoml" so it reads empty sections too.
  for v in $VALIDATORS
  do
    # This will fill in the ports_start_at entry in all sections so empty sections have at least one entry.
    get_ports_start_at "$v" 1> /dev/null
  done
  # End of workaround
}

write_default_config() {
  set +e
  cat <<EOF > "$CONFIG_FILE"
[global]
gaiad_binary="$GLOBAL_GAIAD_BINARY"
ports_start_at=27000
home_dir="$GLOBAL_HOME_DIR"
auto_maintain_config=$GLOBAL_AUTO_MAINTAIN_CONFIG
add_to_hermes=$GLOBAL_ADD_TO_HERMES
hermes_binary="$GLOBAL_HERMES_BINARY"
hermes_config="$GLOBAL_HERMES_CONFIG"
wallet_mnemonic="$GLOBAL_WALLET_MNEMONIC"
wallet_hdpath="$GLOBAL_WALLET_HDPATH"
EOF
  set -e
}

get_gaiad_binary() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.gaiad_binary")"
  if [ -z "$RESULT" ]; then
    echo "$GLOBAL_GAIAD_BINARY"
  else
    eval echo "$RESULT"
  fi
}

get_ports_start_at() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.ports_start_at")"
  if [ -z "$RESULT" ]; then
    THIS_PORTS_START_AT="$(stoml -q "$CONFIG_FILE" global.ports_start_at || echo 27000)"
    sconfig "$CONFIG_FILE" -t int "global.ports_start_at=$((THIS_PORTS_START_AT+10))" 1> /dev/null
    sconfig "$CONFIG_FILE" -t int "${1}.ports_start_at=$THIS_PORTS_START_AT" 1> /dev/null
    echo "$THIS_PORTS_START_AT"
  else
    echo "$RESULT"
  fi
}

get_rpc_port() {
  get_ports_start_at "$1"
}

get_app_port() {
  echo "$(($(get_ports_start_at "$1")+1))"
}

get_grpc_port() {
  echo "$(($(get_ports_start_at "$1")+2))"
}

get_p2p_port() {
  echo "$(($(get_ports_start_at "$1")+3))"
}

get_pprof_port() {
  echo "$(($(get_ports_start_at "$1")+4))"
}

get_grpcw_port() {
  echo "$(($(get_ports_start_at "$1")+5))"
}

get_home_dir() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.home_dir")"
  if [ -z "$RESULT" ]; then
    echo "$GLOBAL_HOME_DIR/$1"
  else
    eval echo "$RESULT"
  fi
}

get_auto_maintain_config() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.auto_maintain_config")"
  if [ -z "$RESULT" ]; then
    test "$GLOBAL_AUTO_MAINTAIN_CONFIG" = "true"
  else
    test "$RESULT" = "true"
  fi
}

get_network() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.network")"
  if [ -z "$RESULT" ]; then
    exit_on_error "Network not found for node ${1}"
  else
    if ! a_in_b "$RESULT" "$VALIDATORS"; then
      return 1
    fi
  fi
  echo "$RESULT"
}

# Note: this depends on one-validator nodes.
# We might want to change it to `stoml -q "${HOME_DIR}/config/genesis.json" "chain_id"` later.
get_chain_id() {
  if a_in_b "$1" "$VALIDATORS"; then
    echo "$1"
  else
    get_network "$1"
  fi
}

get_add_to_hermes() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.add_to_hermes")"
  if [ -z "$RESULT" ]; then
    test "$GLOBAL_ADD_TO_HERMES" = "true"
  else
    test "$RESULT" = "true"
  fi
}

get_node_id() {
  GAIAD_BINARY="$(get_gaiad_binary "$1")"
  HOME_DIR="$(get_home_dir "$1")"
  # Todo: Shall we change this to is_configuration_valid?
  if [ ! -f "${HOME_DIR}/config/node_key.json" ]; then
    warn "Invalid configuration: no node key found for $1"
    echo "DEADBEEFDEADBEEF"
  else
    "$GAIAD_BINARY" tendermint show-node-id --home "$HOME_DIR"
  fi
}

get_wallet_mnemonic() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.wallet_mnemonic")"
  if [ -z "$RESULT" ]; then
    echo "$GLOBAL_WALLET_MNEMONIC"
  else
    echo "$RESULT"
  fi
}

get_wallet_hdpath() {
  RESULT="$(stoml -q "$CONFIG_FILE" "${1}.wallet_hdpath")"
  if [ -z "$RESULT" ]; then
    echo "$GLOBAL_WALLET_HDPATH"
  else
    echo "$RESULT"
  fi
}

create() {
  i="$1"
  echo "Creating $i config..."
  GAIAD_BINARY="$(get_gaiad_binary "$i")"
  HOME_DIR="$(get_home_dir "$i")"
  HOME_ROOT="${HOME_DIR%%${i}}"
  if a_in_b "$i" "$VALIDATORS"; then
    # Removing '-' to work around https://github.com/cosmos/cosmos-sdk/issues/9373
    NODE_DIR_PREFIX="$(echo "${i}v" | tr -d '-')"
    EXEC_RESULT="$("$GAIAD_BINARY" testnet --chain-id "$i" --keyring-backend test --node-dir-prefix "$NODE_DIR_PREFIX" -o "$HOME_ROOT" --node-daemon-home . --v 1 2>&1)"
    if [ "$EXEC_RESULT" != "Successfully initialized 1 node directories" ]; then
      warn "could not create config for ${i}: \"$EXEC_RESULT\", skipping..."
      return 1
    else
      mv "${HOME_ROOT}/${NODE_DIR_PREFIX}0" "${HOME_DIR}"
      mv "${HOME_ROOT}/gentxs" "${HOME_DIR}"
      WALLET_MNEMONIC="$(get_wallet_mnemonic "$i")"
      WALLET_HDPATH="$(get_wallet_hdpath "$i")"
      if [ -z "$WALLET_MNEMONIC" ]; then
        if [ -z "$WALLET_HDPATH" ]; then
          "$GAIAD_BINARY" keys add "wallet" --keyring-backend test --keyring-dir "${HOME_DIR}" --output json > "${HOME_DIR}/wallet_seed.json"
        else
          "$GAIAD_BINARY" keys add "wallet" --hd-path "$WALLET_HDPATH" --keyring-backend test --keyring-dir "${HOME_DIR}" --output json > "${HOME_DIR}/wallet_seed.json"
        fi
      else
        if [ -z "$WALLET_HDPATH" ]; then
          echo "$WALLET_MNEMONIC" | "$GAIAD_BINARY" keys add "wallet" --recover --keyring-backend test --keyring-dir "${HOME_DIR}" --output json > "${HOME_DIR}/wallet_seed.json"
        else
          echo "$WALLET_MNEMONIC" | "$GAIAD_BINARY" keys add "wallet" --hd-path "$WALLET_HDPATH" --recover --keyring-backend test --keyring-dir "${HOME_DIR}" --output json > "${HOME_DIR}/wallet_seed.json"
        fi
        sconfig "${HOME_DIR}/wallet_seed.json" -t string "mnemonic=${WALLET_MNEMONIC}" 1> /dev/null
      fi
      "$GAIAD_BINARY" add-genesis-account "wallet" "10000000stake,100000000samoleans" --keyring-backend test --home "${HOME_DIR}"
      # Workaround for https://github.com/cosmos/cosmos-sdk/issues/9372 : remove supply from genesis
      sconfig "${HOME_DIR}/config/genesis.json" -t stringSlice app_state.bank.supply=remove_supply 1> /dev/null
      OS="$(uname -s)"
      if [ "$OS" = "Darwin" ]; then
        sed -i '' 's/\"remove_supply\"//' "$HOME_DIR/config/genesis.json"
      else
        sed -i'' 's/\"remove_supply\"//' "$HOME_DIR/config/genesis.json"
      fi
      # End of workaround
    fi
  else
    NETWORK="$(get_network "$i")"
    # Removing '-' to work around https://github.com/cosmos/cosmos-sdk/issues/9373
    NODE_DIR_PREFIX="$(echo "${i}n" | tr -d '-')"
    EXEC_RESULT="$("$GAIAD_BINARY" testnet --chain-id "$NETWORK" --keyring-backend test --node-dir-prefix "$NODE_DIR_PREFIX" -o "$HOME_ROOT" --node-daemon-home . --v 1 2>&1)"
    if [ "$EXEC_RESULT" != "Successfully initialized 1 node directories" ]; then
      warn "could not create config for ${i}: \"$EXEC_RESULT\", skipping..."
      return 1
    fi
    mv "${HOME_ROOT}/${NODE_DIR_PREFIX}0" "${HOME_DIR}"
    rm -rf "${HOME_ROOT}/gentxs"
  fi
  configure "$i"
  sconfig "$HOME_DIR/config/config.toml" p2p.addr_book_strict=false 1> /dev/null
  sconfig "$HOME_DIR/config/config.toml" p2p.allow_duplicate_ip=true 1> /dev/null
}

configure() {
  HOME_DIR="$(get_home_dir "$1")"
  P2P="$(get_p2p_port "$1")"
  RPC="$(get_rpc_port "$1")"
  APP="$(get_app_port "$1")"
  GRPC="$(get_grpc_port "$1")"
  PPROF="$(get_pprof_port "$1")"
  GRPCW="$(get_grpcw_port "$1")"
  sconfig "$HOME_DIR/config/config.toml" "p2p.laddr=tcp://0.0.0.0:${P2P}" 1> /dev/null
  sconfig "$HOME_DIR/config/config.toml" "rpc.laddr=tcp://0.0.0.0:${RPC}" 1> /dev/null
  sconfig "$HOME_DIR/config/config.toml" "rpc.pprof_laddr=0.0.0.0:${PPROF}" 1> /dev/null
  # Workaround for https://github.com/spf13/viper/issues/1132
  #   Viper does not support writing array of arrays so we clean out the variable
  sconfig "$HOME_DIR/config/app.toml" -t stringSlice "telemetry.global-labels=panic gaiad" 1> /dev/null
  OS="$(uname -s)"
  if [ "$OS" = "Darwin" ]; then
    sed -i '' 's/  global-labels = \["panic","gaiad"\]/  global-labels = []/' "$HOME_DIR/config/app.toml"
  else
    sed -i'' 's/  global-labels = \["panic","gaiad"\]/  global-labels = []/' "$HOME_DIR/config/app.toml"
  fi
  # End of workaround
  sconfig "$HOME_DIR/config/app.toml" "api.address=tcp://0.0.0.0:${APP}" 1> /dev/null
  sconfig "$HOME_DIR/config/app.toml" "grpc.address=0.0.0.0:${GRPC}" 1> /dev/null
  sconfig "$HOME_DIR/config/app.toml" "grpc-web.address=0.0.0.0:${GRPCW}" 1> /dev/null
  if ! a_in_b "$i" "$VALIDATORS"; then
    NETWORK="$(get_network "$1")"
    NETWORK_HOME_DIR="$(get_home_dir "$NETWORK")"
    if [ ! -f "$NETWORK_HOME_DIR/config/genesis.json" ]; then
      warn "${NETWORK} does not have a genesis.json. Start ${NETWORK} first."
      return 1
    fi
    cp "$NETWORK_HOME_DIR/config/genesis.json" "$HOME_DIR/config/genesis.json"
    NETWORK_NODE="$(get_node_id "$NETWORK")@localhost:$(get_p2p_port "$NETWORK")"
    sconfig "$HOME_DIR/config/config.toml" "p2p.persistent_peers=$NETWORK_NODE" 1> /dev/null
    if get_auto_maintain_config "$NETWORK"; then
      EXISTING_PEERS="$(stoml -q "$NETWORK_HOME_DIR/config/config.toml" "p2p.unconditional_peer_ids")"
      NODE_ID="$(get_node_id "$1")"
      if ! a_in_b_comma_separated "$NODE_ID" "$EXISTING_PEERS"; then
        if [ -z "$EXISTING_PEERS" ]; then
          EXISTING_PEERS="$NODE_ID"
        else
          EXISTING_PEERS="$EXISTING_PEERS,$NODE_ID"
        fi
        sconfig "$NETWORK_HOME_DIR/config/config.toml" "p2p.unconditional_peer_ids=$EXISTING_PEERS" 1> /dev/null
      fi
    fi
  fi
}

is_running() {
  HOME_DIR="$(get_home_dir "$1")"
  GAIAD_PID_FILE="${HOME_DIR}/pid"
  if [ -f "$GAIAD_PID_FILE" ]; then
    GAIAD_PID="$(cat "$GAIAD_PID_FILE")"
    if [ -n "$GAIAD_PID" ]; then
      test "$(ps -p "$GAIAD_PID" -o pid | wc -l)" -eq 2
    else
      return 1
    fi
  else
    return 1
  fi
}

start() {
  if is_running "$1"; then
    warn "$1 is already running, skipping"
  else
    GAIAD_BINARY="$(get_gaiad_binary "$1")"
    HOME_DIR="$(get_home_dir "$1")"
    GAIAD_LOG="${HOME_DIR}/log"
    VALIDATION="$("$GAIAD_BINARY" validate-genesis --home "$HOME_DIR" > "$GAIAD_LOG" 2>&1 || echo "ERR")"
    if [ "$VALIDATION" = "ERR" ]; then
      warn "invalid genesis.json for ${1}. Please check the log and fix manually. Skipping..."
      return 0
    fi
    nohup "$GAIAD_BINARY" start --x-crisis-skip-assert-invariants --home "$HOME_DIR" > "$GAIAD_LOG" 2>&1 &
    GAIAD_PID=$!
    echo "$GAIAD_PID" > "$HOME_DIR/pid"
    echo "$i started, PID: $GAIAD_PID, LOG: $GAIAD_LOG"
    sleep 1
    if ! is_running "$1"; then
      warn "$1 failed. Check the logs with \`gm log $1\`."
    fi
  fi
}

stop() {
  if is_running "$1"; then
    HOME_DIR="$(get_home_dir "$1")"
    GAIAD_PID="$(cat "${HOME_DIR}/pid")"
    echo "Stopping $1 with PID $GAIAD_PID..."
    kill -TERM "$GAIAD_PID" 2> /dev/null && rm -f "$HOME_DIR/pid"
    RESULT="$?"
    if [ "$RESULT" != "0" ]; then
        warn "SIGTERM failed on PID ${GAIAD_PID} for $1. Trying KILL..."
        kill -KILL "$GAIAD_PID" && rm -f "$HOME_DIR/pid"
        RESULT="$?"
        if [ "$RESULT" != "0" ]; then
          warn "SIGKILL failed on PID ${GAIAD_PID} for $1. Giving up..."
        fi
    fi
  else
    HOME_DIR="$(get_home_dir "$1")"
    if [ -f "${HOME_DIR}/pid" ]; then
      GAIAD_PID="$(cat "${HOME_DIR}/pid")"
      if [ -n "$GAIAD_PID" ]; then
        warn "no process with PID $GAIAD_PID found for $1. Removing stale data."
      else
        warn "no process ID found for $1. Removing stale data."
      fi
      rm -f "$HOME_DIR/pid"
    fi
  fi
}

print_header_line() {
  echo "NODE               PID    RPC   APP  GRPC  HOME_DIR"
}

print_status_line() {
    NAME="${2:-}$1"
    NAME_LENGTH="${#NAME}"
    NAME_PAD=""
    if [ "$NAME_LENGTH" -lt 15 ]; then
      for _ in $(seq "$NAME_LENGTH" 15);
      do
        NAME_PAD="$NAME_PAD "
      done
    fi
    HOME_DIR="$(get_home_dir "$1")"
    HOME_DIR_PRINTED=" $HOME_DIR "
    if [ ! -d "$HOME_DIR" ]; then
      HOME_DIR_PRINTED="(${HOME_DIR})"
    fi
    GAIAD_PID_FILE="${HOME_DIR}/pid"
    if [ -f "$GAIAD_PID_FILE" ]; then
      GAIAD_PID="$(cat "$GAIAD_PID_FILE")"
      if [ -z "$GAIAD_PID" ]; then
        GAIAD_PID=" N/A "
      fi
      if [ "$(ps -p "$GAIAD_PID" -o pid | wc -l)" -eq 2 ]; then
        echo "${NAME}${NAME_PAD} $GAIAD_PID  $(get_rpc_port "$1") $(get_app_port "$1") $(get_grpc_port "$1") $HOME_DIR_PRINTED"
      else
        echo "${NAME}${NAME_PAD}($GAIAD_PID)     -     -     - $HOME_DIR_PRINTED"
      fi
    else
       echo "${NAME}${NAME_PAD}     -      -     -     - $HOME_DIR_PRINTED"
    fi
}

status() {
  print_header_line
  for i in $VALIDATORS
  do
    print_status_line "$i"
    for j in $FULL_NODES
    do
      NETWORK="$(get_network "$j")"
      if [ "$i" = "$NETWORK" ]; then
        print_status_line "$j" " "
      else
        continue
      fi
    done
  done
}

ports() {
  P2P="$(get_p2p_port "$1")"
  RPC="$(get_rpc_port "$1")"
  APP="$(get_app_port "$1")"
  GRPC="$(get_grpc_port "$1")"
  PPROF="$(get_pprof_port "$1")"
  GRPCW="$(get_grpcw_port "$1")"
  echo "${1} RPC  : http://localhost:${RPC}"
  echo "${1} APP  : http://localhost:${APP}"
  echo "${1} GRPC : http://localhost:${GRPC}"
  echo "${1} P2P  : http://localhost:${P2P}"
  echo "${1} PPROF: http://localhost:${PPROF}"
  echo "${1} GRPCW: http://localhost:${GRPCW}"
}

list_keys() {
  HOME_DIR="$(get_home_dir "$1")"
  # Todo: Should we change this to is_configuration_valid?
  if [ ! -d "$HOME_DIR" ]; then
    warn "No configuration at ${HOME_DIR}. Skipping..."
    return 0
  fi
  GAIAD_BINARY="$(get_gaiad_binary "$1")"
  echo "\"$GAIAD_BINARY\" keys list --keyring-backend test --keyring-dir \"$HOME_DIR\""
  KEY_NAME=""
  "$GAIAD_BINARY" keys list --keyring-backend test --keyring-dir "$HOME_DIR" | while read -r line
  do
    NAME="${line##'- name: '}"
    TYPE="${line##'type: '}"
    MNEMONIC="${line##'mnemonic:'}"
    THRESHOLD="${line##'threshold: '}"
    PUBKEYS="${line##'pubkeys: '}"
    if [ "$NAME" != "$line" ]; then
      KEY_NAME="$NAME"
      echo
      echo "$line"
    elif [ "$TYPE" != "$line" ]; then
      if [ "$line" != "type: local" ]; then
        echo "$line"
      fi
    elif [ "$MNEMONIC" != "$line" ]; then
      # Removing '-' to work around https://github.com/cosmos/cosmos-sdk/issues/9373
      if a_in_b "${KEY_NAME%%v0}" "$VALIDATORS" || a_in_b "${KEY_NAME%%v0}" "$(echo "$VALIDATORS" | tr -d '-')"; then
        echo "mnemonic: \"$(stoml "${HOME_DIR}/key_seed.json" secret)\""
      # Removing '-' to work around https://github.com/cosmos/cosmos-sdk/issues/9373
      elif a_in_b "${KEY_NAME%%n0}" "$FULL_NODES" || a_in_b "${KEY_NAME%%n0}" "$(echo "$FULL_NODES" | tr -d '-')"; then
        echo "mnemonic: \"$(stoml "${HOME_DIR}/key_seed.json" secret)\""
      elif [ -f "${HOME_DIR}/${KEY_NAME}_seed.json" ]; then
        echo "mnemonic: \"$(stoml "${HOME_DIR}/${KEY_NAME}_seed.json" mnemonic)\""
      else
        echo "mnemonic: \"\""
      fi
    elif [ "$THRESHOLD" != "$line" ]; then
      if [ "$line" != "threshold: 0" ]; then
        echo "$line"
      fi
    elif [ "$PUBKEYS" != "$line" ]; then
      if [ "$line" != "pubkeys: []" ]; then
        echo "$line"
      fi
    else
      echo "$line"
    fi
  done
}

hermes_config() {
  cat <<EOF > "$GLOBAL_HERMES_CONFIG"
[global]
strategy = '${GLOBAL_HERMES_STRATEGY}'
log_level = '${GLOBAL_HERMES_LOG_LEVEL}'

EOF
  for i in $ALL_NODES
  do
    if ! get_add_to_hermes "$i"; then
      continue
    fi
    RPC="$(get_rpc_port "$i")"
    GRPC="$(get_grpc_port "$i")"
    ID="$(get_chain_id "$i")"
    cat <<EOF >> "$GLOBAL_HERMES_CONFIG"
[[chains]]
id='${ID}'
rpc_addr='http://localhost:${RPC}'
grpc_addr='https://localhost:${GRPC}'
websocket_addr='ws://localhost:${RPC}/websocket'
rpc_timeout='1s'
account_prefix='cosmos'
key_name='wallet'
store_prefix='ibc'
fee_denom='stake'

[chains.trust_threshold]
numerator = '1'
denominator = '3'

EOF
    done
}

hermes_keys() {
  ID="$(get_chain_id "$1")"
  NETWORK_HOME_DIR="$(get_home_dir "$ID")"
  test -x "$GLOBAL_HERMES_BINARY" || exit_with_error "hermes binary \"${GLOBAL_HERMES_BINARY}\" not found, check your gm.toml config."
  if [ -z "$GLOBAL_HERMES_CONFIG" ]; then
    "$GLOBAL_HERMES_BINARY" keys add "$ID" -f "${NETWORK_HOME_DIR}/wallet_seed.json"
  else
    "$GLOBAL_HERMES_BINARY" -c "$GLOBAL_HERMES_CONFIG" keys add "$ID" -f "${NETWORK_HOME_DIR}/wallet_seed.json"
  fi
}

hermes_cc() {
  CHAINS=""
  for i in $ALL_HERMES_NODES
  do
    if ! a_in_b "$i" "$CHAINS"; then
      ID="$(get_chain_id "$i")"
      CHAINS="$CHAINS $ID"
    fi
  done
  CHAINS="${CHAINS## }"
  N="$(($(echo "$CHAINS" | wc -w)))"
  for i in $(seq 1 $((N-1)))
  do
    for j in $(seq $((i+1)) $N)
    do
      echo "\"${GLOBAL_HERMES_BINARY}\" create channel $(n_from_a "$i" "$CHAINS") $(n_from_a "$j" "$CHAINS") --port-a transfer --port-b transfer"
    done
  done
}

reset() {
  WAS_RUNNING="$(is_running "$1" || echo "no")"
  if [ -z "$WAS_RUNNING" ]; then
    if a_in_b "$1" "$VALIDATORS"; then
      warn "After reset all full nodes will need to be reset too."
    fi
    stop "$1"
  fi
  GAIAD_BINARY="$(get_gaiad_binary "$1")"
  HOME_DIR="$(get_home_dir "$1")"
  echo "Resetting $1..."
  # Todo: Should we change this to is_configuration_valid?
  if [ ! -d "$HOME_DIR" ]; then
    warn "No configuration at ${HOME_DIR}. Skipping..."
    return 0
  fi
  "$GAIAD_BINARY" unsafe-reset-all --home "$HOME_DIR"
  if [ -z "$WAS_RUNNING" ]; then
    start "$1"
  fi
}

# Guard against removing arbitrary folders/files, only remove folders that have at least a half-baked node configuration.
safer_rm() {
  if [ $# -eq 1 ]; then
    if a_in_b "$1" "$ALL_NODES"; then
      HOME_DIR="$(get_home_dir "$1")"
      if [ -d "$HOME_DIR" ]; then
        if [ -d "$HOME_DIR/config" ]; then
          if [ -f "$HOME_DIR/config/config.toml" ]; then
            if [ -d "$HOME_DIR/data" ]; then
              echo "Executing \"rm -r $HOME_DIR\"..."
              rm -r "$HOME_DIR"
            else
              warn "Anxious to run \"rm -r ${HOME_DIR}\" automatically, folder does not contain data folder, skipping..."
            fi
          else
            warn "Anxious to run \"rm -r ${HOME_DIR}\" automatically, folder does not contain config file, skipping..."
          fi
        else
          warn "Anxious to run \"rm -r ${HOME_DIR}\" automatically, folder does not contain config folder, skipping..."
        fi
      else
        warn "Anxious to run \"rm -r ${HOME_DIR}\" automatically, folder does not exist, skipping..."
      fi
    else
      warn "Anxious to delete \"${1}\" automatically, node not in configuration, skipping..."
    fi
  else
    warn "Anxious to delete \"${*}\" automatically, looks like multiple paths, skipping..."
  fi
}
